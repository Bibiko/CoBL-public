TODO
====

Django 1.2
----------

Object-level permissions¶
~~~~~~~~~~~~~~~~~~~~~~~~~

A foundation for specifying permissions at the per-object level was added in Django 1.2 alpha but not documented with the alpha release.

The default authentication backends shipped with Django do not currently make use of this, but third-party authentication backends are free to do so. See the authentication docs for more information.

Permissions for anonymous users¶
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you provide a custom authentication backend with the attribute supports_anonymous_user set to True, the AnonymousUser class will check the backend for permissions, just as the normal User does. This is intended to help centralize permission handling; apps can always delegate the question of whether something is allowed or not to the authorization/authentication system. See the authentication docs for more details.


for Version 0.3
---------------

- Admin-Auth pages

  * Administrator:

    - add user
    - change user details

  * User

    - view own profile (incl. permissions)
    - view other user's profile (incl. statistics)
    - change password

- Implement permissions/permission groups on all editing actions

- change password view

- report permissions/group membership in profile

- Check that the same alias isn't used twice for different cognates, same
  meaning (e.g. in the 'breathe/life' and 'animal' sets). 
  
  Maybe: dynamically check that the list of aliases corresponds uniquely to a
  list of cognate sets, and apply a new alias to one of the forms (would have
  to check against the aliases used by the other meanings corresponding to the
  form as well).

  Maybe: test for alias collisions with a post-save hook and rename the alias
  if it should ever occur.

- Need a many to many table linking cognate sets to sources: in lots of cases
  we have general information about the reconstructed form

- The Language.description field in (the sidebar of?) the /language/ view

- Add language (and maybe delete too--from a new page) # part DONE

- Fix exception raised when you try to change a blank value in the language
  edit page # DONE?

- Handle typos in url fields.

- Add/edit meaning pages

- check all ModelForm edit functions that the instance is specified when these
  are intended to edit an existing object rather than create a new one (see
  view.py edit_language.py).

for Version 0.4
---------------

- Add comments field to all editing functions to add comment to version info.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

General
-------

- change language names to something better for e.g. "English St"

- add a url ``/lexeme/XX/view-citation/YY/`` (and ``view-cognate-citation``,
  ``view-cognate``) equivalent to ``edit-citation`` etc., but just highlighting
  the relevant bit (for use in canonical_url)

- Dynamically generate a more interesting Acknowledgements page (feed it a
  LanguageList and a MeaningList argument, and output a list of contributors
  with a measure of their contributions, both who coded the data and the
  sources)

- Include all relevant citations in export functions.

- test what happens when you change a language name (does data get lost)?

- Use http://docs.djangoproject.com/en/dev/howto/custom-management-commands/ to
  make database-specific management functions (e.g. add users, change user
  permissions, change superuser password, etc)

- Recent changes is broken in the case that a lexeme is deleted (at least until
  it goes off the bottom of the screen) -- I think this is to do with the 'link
  to current object'

Development
-----------

- Make a developer site on e.g. google code

- Make another database with the Aslian materials (so we can keep up with
  whether the addition of the kinship module has broken anything of the basic
  db).

- Do there need to be any import functions?


Stack Overflow
--------------

- Why must I install the Sites app to use the flatpages app?

- How can I add extra choices to a selection drop down otherwise based on a
  query?

- Django reversion: retrospectively adding my models to the reversion table...
