TODO
====

- rewrite templates so the database can handle startup from nothing (e.g.
  initially, only offer "create language", "create meaning" pages

- The url `/language/Maniq/` should be qualified::

    /language/Maniq/wordlist/Swadesh100/

  **DONE**

  Treat `/language/Maniq/` as an alias of `/language/Maniq/wordlist/all`

  **DONE**

- Get rid of the LanguageList session variable, and put the info into urls
  instead::

    /languages/Dunn2011/meaning/ash/

  Treat `/meaning/ash/` as an alias of `/languages/all/meaning/ash`

- language lists and wordlists should have two orders, the default order (saved
  in the database) and alphabetical order. People don't need to be able to
  customize this further.

- XXX Next big task: refactor the /meaning/.../ functions to handle
  /languages/.../ specification.

- Describe grammar of urls::

    /language/...(/wordlist/...)/ # list of words in a language *
    /language/.../                # default: all words in language *
    /language/.../domain/.../     # list of words in a language pertaining to
                                  # domain *
    /languages/.../               # names lists *
    /meaning/.../                 # list of all words with a meaning *
    /meaning/...(/languages/...)/ # list of words with a meaning (in language
                                  # list) *
    # lexemes in this view have identifiers, e.g.
    /meaning/animal/languages/aslian/#lexeme_6
    /meaning/.../delete/          # *
    /meanings/                    # alias for /wordlist/all/ *
    /wordlist/Swadesh100/         # a named list of meanings *
    /meanings/add-new/            # (this is why we need both meanings and wordlist) *
    /wordlists/                   # list defined wordlists *
    /domain/.../                  # relation names in a domain *

    * DONE
  
  Reserved names for sets 'all' (for languages, meanings), 'none' (for
  meanings, domains)

  TODO: work on a set of explicit principles for url element order

  Urls consist of a sequence of  FUNCTION-ARGUMENT, VERB-OBJECT,
  CLASSIFIER-NOUN elements

  Adding lexemes, with different amounts of prespecified info::

    /language/.../lexeme/add/
    /meaning/.../lexeme/add/
    /language/.../meaning/.../lexeme/add/ # return to language
    /meaning/.../language/.../lexeme/add/ # return to meaning
    /lexeme/add/

- refactor base templates:

  These just need to take object, title_text, header_text arguments. This
  should then be easy to convert to class based views.

  * edit_object 
  * view_object
  * list_object
  * change_and_reorder_from list (for language lists, meaning lists, etc)


for Version 0.3
---------------

- Admin-Auth pages

  * Administrator:

    - add user
    - change user details

  * User

    - view own profile (incl. permissions)
    - view other user's profile (incl. statistics)
    - change password

  * Dashboard thing

- Implement permissions/permission groups on all editing actions

- change password view

- report permissions/group membership in profile

- Check that the same alias isn't used twice for different cognates, same
  meaning (e.g. in the 'breathe/life' and 'animal' sets). 
  
  Maybe: dynamically check that the list of aliases corresponds uniquely to a
  list of cognate sets, and apply a new alias to one of the forms (would have
  to check against the aliases used by the other meanings corresponding to the
  form as well).

- Need a many to many table linking cognate sets to sources: in lots of cases
  we have general information about the reconstructed form

- The Language.description field in (the sidebar of?) the /language/ view

- Handle typos in url fields. **full 404 handling**

- Add/edit meaning pages

- check all ModelForm edit functions that the instance is specified when these
  are intended to edit an existing object rather than create a new one (see
  view.py edit_language.py).

for Version 0.4
---------------

- Add comments field to all editing functions to add comment to version info.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

General
-------

- change language names to something better for e.g. "English St"

- add a url ``/lexeme/XX/view-citation/YY/`` (and ``view-cognate-citation``,
  ``view-cognate``) equivalent to ``edit-citation`` etc., but just highlighting
  the relevant bit (for use in canonical_url)

- Dynamically generate a more interesting Acknowledgements page (feed it a
  LanguageList and a MeaningList argument, and output a list of contributors
  with a measure of their contributions, both who coded the data and the
  sources)

- Include all relevant citations in export functions.

- Use http://docs.djangoproject.com/en/dev/howto/custom-management-commands/ to
  make database-specific management functions (e.g. add users, change user
  permissions, change superuser password, etc)

- Recent changes is broken in the case that a lexeme is deleted (at least until
  it goes off the bottom of the screen) -- I think this is to do with the 'link
  to current object'

Development
-----------

- Make a developer site on e.g. google code

- Make another database with the Aslian materials (so we can keep up with
  whether the addition of the kinship module has broken anything of the basic
  db).

- Do there need to be any import functions?


Stack Overflow
--------------

- Why must I install the Sites app to use the flatpages app?

- How can I add extra choices to a selection drop down otherwise based on a
  query?

- Django reversion: retrospectively adding my models to the reversion table...
