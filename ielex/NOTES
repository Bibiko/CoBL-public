DESIGN
======

TODO
====

- don't conflate "doubtful" codings, since each "doubtful" subset is not
  doubtful within itself
- but put a comment in the cognate set object saying that this set may be
  cognate with another set
- add a view notes field and an alias field to /cognate/\d+ view
- allow notes to be edited
- make all the appearances of cognate class aliases in views into links to this
- put some kind of icon for "reliability" against cognate aliases and lexemes
- test what happens when you change a language name (does the data get lost)

Database function
-----------------

- Register a "sticky" source, so that all subsequent entries default
  to that source

Icons
-----

 Sweetie BasePack ::

   Author:  Joseph North
   Email:   sublick@gmail.com
   Licence: Attribution-ShareAlike 3.0
   Website: sweetie.sublink.ca


TECHNICAL NOTES
===============

Debugging
---------

Add ``assert False`` in your view code to dump debug information.

Joins
-----

To go backwards through ``ManyToMany`` and ``ForeignKey`` fields the attribute
name is generated by appending the lower case model name to _set. Note that
this means that cognate_set is a horrible choice for a field name.

Big joins across tables::

  In [2]: c = CognateSet.objects.get(id=1)

  In [12]: c.cognatejudgement_set.all()[0].lexeme.meaning
  Out[12]: <Meaning: AND>

Another trick uses the double-underscore syntax::

  Lexeme.objects.filter(meaning__gloss="blood")


QuerySet objects
----------------

- can be concatenated with a "|"::

  cs = CognateSet.objects.filter(alias="O") | CognateSet.objects.filter(alias="P")

Database trigger
----------------

http://docs.djangoproject.com/en/dev/topics/signals/#topics-signals

Django equivalent of a database trigger::

  from django.db.models import signals

  def update_bookmark_aggregate(sender, instance, **kwargs):
      bmark = instance.bookmark
      bmark.num_votes = bmark.votes.count()
      bmark.score = sum(bmark.votes.values_list('value', flat=True))
      bmark.save(force_update=True)
  signals.post_save.connect(update_bookmark_aggregate, sender=Vote)

From: http://www.eflorenzano.com/blog/post/database-triggers-arent-evil-and-they-actually-kin/

Forms
-----

Making your own form via a template:

http://code.djangoproject.com/wiki/TemplatedForm

This article shows how to use template to render CustomForms instead of
as_p(), as_table()...

To make the snippet work, change:

 * from ``django import newforms as forms`` to ``from django import forms``
 * from ``django.newforms.forms import BoundField`` to ``from
   django.forms.forms import BoundField``

This looks like the way to get my own classes into forms for css, e.g.
th.colheader { text-align: center }; th.rowheader { text-align: right }.


Bar charts
----------

can be made with templates::

 <img src="bar.gif" height="10" width="{% widthratio this_value max_value 100 %}" />
 
I'm not quite sure what the widthratio tag is useful for, since surely a
constant width bar is all you need.

Database Backups
----------------

Very good level of compression:

 ===================  =========  ===========
 original file          2360320  db.sqlite3
 text dump              3402426  db.dump
 bzip2ed dump            329966  db.dump.bz2
 reconstitiuted file    2350080  tmp.sqlite3
 ===================  =========  ===========

A useful commandline is::

  sqlite3 db.sqlite3 .dump | bzip2 > db.dump.bz2

login pages
-----------

Don't write your own: take them from the auth/admin modules

http://stackoverflow.com/questions/550632/favorite-django-tips-features/559972#559972

vim
---

When lots of tabs open::

  set guitablabel=%t

.. vim:ft=rst
